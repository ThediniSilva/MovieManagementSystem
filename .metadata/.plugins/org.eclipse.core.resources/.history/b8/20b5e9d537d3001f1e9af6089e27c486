package com.example.MovieTicketBookingSystem.controller;

import org.springframework.web.bind.annotation.*;
import org.springframework.http.ResponseEntity;
import org.springframework.http.HttpStatus;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.multipart.MultipartFile;

import com.example.MovieTicketBookingSystem.entity.Movie;
import com.example.MovieTicketBookingSystem.repository.MovieRepository;

import java.io.IOException;
import java.nio.file.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.util.List;

@RestController
@RequestMapping("/api/movies")
@CrossOrigin(origins = "http://localhost:4200")
public class MovieController {

    private static final Logger logger = LoggerFactory.getLogger(MovieController.class);

    @Autowired
    private MovieRepository movieRepository;

    @Value("${movie.image.directory}")
    private String imageDirectory;

    @PostMapping("/add")
    public ResponseEntity<String> addMovie(
            @RequestParam("title") String title,
            @RequestParam("genre") String genre,
            @RequestParam("duration") int duration,
            @RequestParam("director") String director,
            @RequestParam("image") MultipartFile image) {
        if (title.isEmpty() || genre.isEmpty() || director.isEmpty() || duration <= 0 || image.isEmpty()) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Invalid input data.");
        }

        try {
            Path imagePath = Paths.get(imageDirectory);
            Files.createDirectories(imagePath);

            String fileName = System.currentTimeMillis() + "_" + image.getOriginalFilename();
            Path filePath = imagePath.resolve(fileName);
            Files.write(filePath, image.getBytes());

            Movie movie = new Movie(title, genre, duration, director, filePath.toString());
            movieRepository.save(movie);

            logger.info("Movie added successfully: {}", movie);
            return ResponseEntity.status(HttpStatus.CREATED).body("Movie added successfully!");
        } catch (IOException e) {
            logger.error("Error saving movie: ", e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Error saving movie.");
        }
    }

    @PutMapping("/update/{id}")
    public ResponseEntity<String> updateMovie(@PathVariable Long id,
                                              @RequestParam("title") String title,
                                              @RequestParam("genre") String genre,
                                              @RequestParam("duration") int duration,
                                              @RequestParam("director") String director,
                                              @RequestParam(value = "image", required = false) MultipartFile image) {
        Movie movie = movieRepository.findById(id).orElse(null);
        if (movie == null) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Movie not found!");
        }

        movie.setTitle(title);
        movie.setGenre(genre);
        movie.setDuration(duration);
        movie.setDirector(director);

        if (image != null && !image.isEmpty()) {
            try {
                if (movie.getImageUrl() != null) {
                    Files.deleteIfExists(Paths.get(movie.getImageUrl()));
                }

                Path imagePath = Paths.get(imageDirectory);
                Files.createDirectories(imagePath);

                String fileName = System.currentTimeMillis() + "_" + image.getOriginalFilename();
                Path filePath = imagePath.resolve(fileName);
                Files.write(filePath, image.getBytes());

                movie.setImageUrl(filePath.toString());
            } catch (IOException e) {
                logger.error("Error saving updated image: ", e);
                return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Error saving updated image.");
            }
        }

        movieRepository.save(movie);
        return ResponseEntity.status(HttpStatus.OK).body("Movie updated successfully!");
    }

    @DeleteMapping("/delete/{id}")
    public ResponseEntity<String> deleteMovie(@PathVariable Long id) {
        Movie movie = movieRepository.findById(id).orElse(null);
        if (movie == null) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Movie not found!");
        }

        try {
            if (movie.getImageUrl() != null) {
                Files.deleteIfExists(Paths.get(movie.getImageUrl()));
            }
            movieRepository.delete(movie);
            return ResponseEntity.status(HttpStatus.OK).body("Movie deleted successfully!");
        } catch (Exception e) {
            logger.error("Error deleting movie: ", e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Error deleting movie.");
        }
    }
}
