package com.example.MovieTicketBookingSystem.controller;

import org.springframework.web.bind.annotation.*;
import org.springframework.http.ResponseEntity;
import org.springframework.http.HttpStatus;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.multipart.MultipartFile;

import com.example.MovieTicketBookingSystem.entity.Movie;
import com.example.MovieTicketBookingSystem.repository.MovieRepository;

import java.io.IOException;
import java.nio.file.*;
import java.util.List;
import java.util.Optional;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@RestController
@RequestMapping("/api/movies")
@CrossOrigin(origins = "http://localhost:4200") // Allow requests from Angular frontend
public class MovieController {

    private static final Logger logger = LoggerFactory.getLogger(MovieController.class);

    @Autowired
    private MovieRepository movieRepository;

    // Add Movie
    @PostMapping("/add")
    public ResponseEntity<String> addMovie(
            @RequestParam("title") String title,
            @RequestParam("genre") String genre,
            @RequestParam("duration") int duration,
            @RequestParam("director") String director,
            @RequestParam("image") MultipartFile image) {
        if (image.isEmpty() || title.isEmpty() || genre.isEmpty() || director.isEmpty() || duration <= 0) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Invalid input data.");
        }

        try {
            String directory = "D:\\Projects\\image";
            Path imagePath = Paths.get(directory);
            Files.createDirectories(imagePath);

            String fileName = System.currentTimeMillis() + "_" + image.getOriginalFilename();
            Path filePath = imagePath.resolve(fileName);
            Files.write(filePath, image.getBytes());

            Movie movie = new Movie(title, genre, duration, director, filePath.toString());
            movieRepository.save(movie);

            logger.info("Movie added successfully: {}", movie);
            return ResponseEntity.status(HttpStatus.CREATED).body("Movie added successfully with image!");
        } catch (IOException e) {
            logger.error("Error saving movie: ", e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body("Error saving movie: " + e.getMessage());
        }
    }

    // Retrieve All Movies
    @GetMapping("/all")
    public ResponseEntity<List<Movie>> getAllMovies() {
        List<Movie> movies = movieRepository.findAll();
        return ResponseEntity.ok(movies);
    }

    // Retrieve Movie by ID
    @GetMapping("/{id}")
    public ResponseEntity<Movie> getMovieById(@PathVariable Long id) {
        Optional<Movie> movie = movieRepository.findById(id);
        if (movie.isPresent()) {
            return ResponseEntity.ok(movie.get());
        } else {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(null);
        }
    }

    // Update Movie
    @PutMapping("/update/{id}")
    public ResponseEntity<String> updateMovie(
            @PathVariable Long id,
            @RequestParam("title") String title,
            @RequestParam("genre") String genre,
            @RequestParam("duration") int duration,
            @RequestParam("director") String director,
            @RequestParam(value = "image", required = false) MultipartFile image) {
        Optional<Movie> movieOpt = movieRepository.findById(id);
        if (movieOpt.isPresent()) {
            try {
                Movie movie = movieOpt.get();

                movie.setTitle(title);
                movie.setGenre(genre);
                movie.setDuration(duration);
                movie.setDirector(director);

                if (image != null && !image.isEmpty()) {
                    String directory = "D:\\Projects\\image";
                    Path imagePath = Paths.get(directory);
                    Files.createDirectories(imagePath);

                    String fileName = System.currentTimeMillis() + "_" + image.getOriginalFilename();
                    Path filePath = imagePath.resolve(fileName);
                    Files.write(filePath, image.getBytes());
                    movie.setImage(filePath.toString());
                }

                movieRepository.save(movie);
                logger.info("Movie updated successfully: {}", movie);
                return ResponseEntity.ok("Movie updated successfully!");
            } catch (IOException e) {
                logger.error("Error updating movie: ", e);
                return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                        .body("Error updating movie: " + e.getMessage());
            }
        } else {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Movie not found!");
        }
    }

    // Delete Movie
    @DeleteMapping("/delete/{id}")
    public ResponseEntity<String> deleteMovie(@PathVariable Long id) {
        if (movieRepository.existsById(id)) {
            movieRepository.deleteById(id);
            logger.info("Movie with ID {} deleted successfully.", id);
            return ResponseEntity.ok("Movie deleted successfully!");
        } else {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Movie not found!");
        }
    }
}
